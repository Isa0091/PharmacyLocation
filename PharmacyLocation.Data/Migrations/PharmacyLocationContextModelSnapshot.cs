// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyLocation.Data;

#nullable disable

namespace PharmacyLocation.Data.Migrations
{
    [DbContext(typeof(PharmacyLocationContext))]
    partial class PharmacyLocationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PharmacyLocation.Core.FavoriteUserProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ProductId", "UserId");

                    b.ToTable("FavoriteUserProducts");
                });

            modelBuilder.Entity("PharmacyLocation.Core.Pharmacy", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("PharmacyLocation.Core.PharmacyProduct", b =>
                {
                    b.Property<string>("IdProduct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdPharmacy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProduct", "IdPharmacy");

                    b.HasIndex("IdPharmacy");

                    b.ToTable("PharmacyProducts");
                });

            modelBuilder.Entity("PharmacyLocation.Core.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PharmacyLocation.Core.FavoriteUserProduct", b =>
                {
                    b.HasOne("PharmacyLocation.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PharmacyLocation.Core.Pharmacy", b =>
                {
                    b.OwnsOne("PharmacyLocation.DescriptionVo", "Description", b1 =>
                        {
                            b1.Property<string>("PharmacyId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)");

                            b1.HasKey("PharmacyId");

                            b1.ToTable("Pharmacies");

                            b1.WithOwner()
                                .HasForeignKey("PharmacyId");
                        });

                    b.OwnsOne("PharmacyLocation.LocationVo", "Location", b1 =>
                        {
                            b1.Property<string>("PharmacyId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<double>("Presicion")
                                .HasColumnType("float");

                            b1.HasKey("PharmacyId");

                            b1.ToTable("Pharmacies");

                            b1.WithOwner()
                                .HasForeignKey("PharmacyId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("PharmacyLocation.Core.PharmacyProduct", b =>
                {
                    b.HasOne("PharmacyLocation.Core.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("IdPharmacy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmacyLocation.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PharmacyLocation.Core.Product", b =>
                {
                    b.OwnsOne("PharmacyLocation.DescriptionVo", "Description", b1 =>
                        {
                            b1.Property<string>("ProductId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Description")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
